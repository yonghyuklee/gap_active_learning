import argparse
from gap_active_learning.al.vasp import *
from gap_active_learning.al.similarity import *
from gap_active_learning.setups.hpc import *

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-mlp','--mlp', type=str, default='GAP',
                        help='Choose MLP class among GAP and MACE (default: GAP)')
    parser.add_argument('-HPC','--hpc_cluster', type=str, default='Polaris',
                        help='Choose HPC cluster you want to run DFT calculations')
    parser.add_argument('-proj','--project', type=str, default='CuPd',
                        help='Choose VASP input setups for projects (default: CuPd)')
    parser.add_argument('-sys','--system', type=str, default='pbs',
                        help='Choose HPC system either pbs or slurm (default: pbs)')
    parser.add_argument('-cluster','--n_cluster', type=int,
                        help='Number of clusters in PCA sampling')
    parser.add_argument('-foundation','--foundation', action='store_true',
                        help='Parsing results generated by foundation model (without committee models)')
    args = parser.parse_args()

    if args.mlp == 'GAP':
        self = GapGen(
                      'gap.xml',
                      'training_set.xyz',
                    #   kappa_min = 0.00000001,
                    #   geoopt_maxsteps = 100,
                      uncertainty_min = 50,
                      kappa_min = 0.1,
                      project=args.project,
                      )
        print('Calculating best similarities')
        self.uncertainty_analysis()
        self.write_selected_for_DFT()
        if len(self.selected_folders) == 0:
            print('\n\nNo new candidates found for kappa threshold %s'%self.kappa_min)
        print('\n\n Selected folders:')
        print(self.selected_folders)
        for k in self.uncertainties:
            print("Maximum uncertanty for {} is {} meV/atom".format(k, self.uncertainties[k]))
        print('\n Writing DFT data')
        self.generate_all_DFT_data()
        write_dft_starter(self.dftdir)
        write_job_script(self.dftdir, hpc=args.hpc_cluster)
    
    elif args.mlp == 'MACE':
        self = MACEGen(
                       md_files = {
                                 'final_structure' :'md.xyz',
                                 },
                       max_selected = 1000,
                       nn_uncertainty = 0.09,
                       max_force = 5,
                       project=args.project,
                       foundation=args.foundation,
                      )
        print('\n Writing DFT data')
        if args.n_cluster:
            print("PCA cluster option is turned on!")
            self.generate_DFT_data_from_uncertainty(cluster=True, n_cluster=args.n_cluster)
        else:
            self.generate_DFT_data_from_uncertainty(cluster=False)
        write_dft_starter(self.dftdir, walltime="06", system=args.system)
        write_job_script(self.dftdir, hpc=args.hpc_cluster)